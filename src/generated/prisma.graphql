# source: https://eu1.prisma.sh/covid-tracker-nigeria/covid-tracker-db/dev
# timestamp: Fri May 01 2020 01:46:54 GMT+0100 (West Africa Standard Time)

type AggregateState {
  count: Int!
}

type AggregateTimeline {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createState(data: StateCreateInput!): State!
  createTimeline(data: TimelineCreateInput!): Timeline!
  updateState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State
  updateTimeline(data: TimelineUpdateInput!, where: TimelineWhereUniqueInput!): Timeline
  deleteState(where: StateWhereUniqueInput!): State
  deleteTimeline(where: TimelineWhereUniqueInput!): Timeline
  upsertState(where: StateWhereUniqueInput!, create: StateCreateInput!, update: StateUpdateInput!): State!
  upsertTimeline(where: TimelineWhereUniqueInput!, create: TimelineCreateInput!, update: TimelineUpdateInput!): Timeline!
  updateManyStates(data: StateUpdateManyMutationInput!, where: StateWhereInput): BatchPayload!
  updateManyTimelines(data: TimelineUpdateManyMutationInput!, where: TimelineWhereInput): BatchPayload!
  deleteManyStates(where: StateWhereInput): BatchPayload!
  deleteManyTimelines(where: TimelineWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State]!
  timelines(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Timeline]!
  state(where: StateWhereUniqueInput!): State
  timeline(where: TimelineWhereUniqueInput!): Timeline
  statesConnection(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateConnection!
  timelinesConnection(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimelineConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type State implements Node {
  id: ID!
  name: String!
  slug: String!
  timeline(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Timeline!]
}

"""A connection to a list of items."""
type StateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateEdge]!
  aggregate: AggregateState!
}

input StateCreateInput {
  id: ID
  name: String!
  slug: String!
  timeline: TimelineCreateManyWithoutStateInput
}

input StateCreateOneWithoutTimelineInput {
  create: StateCreateWithoutTimelineInput
  connect: StateWhereUniqueInput
}

input StateCreateWithoutTimelineInput {
  id: ID
  name: String!
  slug: String!
}

"""An edge in a connection."""
type StateEdge {
  """The item at the end of the edge."""
  node: State!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
}

type StatePreviousValues {
  id: ID!
  name: String!
  slug: String!
}

type StateSubscriptionPayload {
  mutation: MutationType!
  node: State
  updatedFields: [String!]
  previousValues: StatePreviousValues
}

input StateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateWhereInput
}

input StateUpdateInput {
  name: String
  slug: String
  timeline: TimelineUpdateManyWithoutStateInput
}

input StateUpdateManyMutationInput {
  name: String
  slug: String
}

input StateUpdateOneRequiredWithoutTimelineInput {
  create: StateCreateWithoutTimelineInput
  connect: StateWhereUniqueInput
  update: StateUpdateWithoutTimelineDataInput
  upsert: StateUpsertWithoutTimelineInput
}

input StateUpdateWithoutTimelineDataInput {
  name: String
  slug: String
}

input StateUpsertWithoutTimelineInput {
  update: StateUpdateWithoutTimelineDataInput!
  create: StateCreateWithoutTimelineInput!
}

input StateWhereInput {
  """Logical AND on all given filters."""
  AND: [StateWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  timeline_every: TimelineWhereInput
  timeline_some: TimelineWhereInput
  timeline_none: TimelineWhereInput
}

input StateWhereUniqueInput {
  id: ID
  slug: String
}

type Subscription {
  state(where: StateSubscriptionWhereInput): StateSubscriptionPayload
  timeline(where: TimelineSubscriptionWhereInput): TimelineSubscriptionPayload
}

type Timeline implements Node {
  id: ID!
  confirmed: Int!
  recoveries: Int!
  deaths: Int!
  dateRecorded: DateTime!
  state: State!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TimelineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimelineEdge]!
  aggregate: AggregateTimeline!
}

input TimelineCreateInput {
  id: ID
  confirmed: Int
  recoveries: Int
  deaths: Int
  dateRecorded: DateTime!
  state: StateCreateOneWithoutTimelineInput!
}

input TimelineCreateManyWithoutStateInput {
  create: [TimelineCreateWithoutStateInput!]
  connect: [TimelineWhereUniqueInput!]
}

input TimelineCreateWithoutStateInput {
  id: ID
  confirmed: Int
  recoveries: Int
  deaths: Int
  dateRecorded: DateTime!
}

"""An edge in a connection."""
type TimelineEdge {
  """The item at the end of the edge."""
  node: Timeline!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimelineOrderByInput {
  id_ASC
  id_DESC
  confirmed_ASC
  confirmed_DESC
  recoveries_ASC
  recoveries_DESC
  deaths_ASC
  deaths_DESC
  dateRecorded_ASC
  dateRecorded_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TimelinePreviousValues {
  id: ID!
  confirmed: Int!
  recoveries: Int!
  deaths: Int!
  dateRecorded: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TimelineScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TimelineScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimelineScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimelineScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  confirmed: Int

  """All values that are not equal to given value."""
  confirmed_not: Int

  """All values that are contained in given list."""
  confirmed_in: [Int!]

  """All values that are not contained in given list."""
  confirmed_not_in: [Int!]

  """All values less than the given value."""
  confirmed_lt: Int

  """All values less than or equal the given value."""
  confirmed_lte: Int

  """All values greater than the given value."""
  confirmed_gt: Int

  """All values greater than or equal the given value."""
  confirmed_gte: Int
  recoveries: Int

  """All values that are not equal to given value."""
  recoveries_not: Int

  """All values that are contained in given list."""
  recoveries_in: [Int!]

  """All values that are not contained in given list."""
  recoveries_not_in: [Int!]

  """All values less than the given value."""
  recoveries_lt: Int

  """All values less than or equal the given value."""
  recoveries_lte: Int

  """All values greater than the given value."""
  recoveries_gt: Int

  """All values greater than or equal the given value."""
  recoveries_gte: Int
  deaths: Int

  """All values that are not equal to given value."""
  deaths_not: Int

  """All values that are contained in given list."""
  deaths_in: [Int!]

  """All values that are not contained in given list."""
  deaths_not_in: [Int!]

  """All values less than the given value."""
  deaths_lt: Int

  """All values less than or equal the given value."""
  deaths_lte: Int

  """All values greater than the given value."""
  deaths_gt: Int

  """All values greater than or equal the given value."""
  deaths_gte: Int
  dateRecorded: DateTime

  """All values that are not equal to given value."""
  dateRecorded_not: DateTime

  """All values that are contained in given list."""
  dateRecorded_in: [DateTime!]

  """All values that are not contained in given list."""
  dateRecorded_not_in: [DateTime!]

  """All values less than the given value."""
  dateRecorded_lt: DateTime

  """All values less than or equal the given value."""
  dateRecorded_lte: DateTime

  """All values greater than the given value."""
  dateRecorded_gt: DateTime

  """All values greater than or equal the given value."""
  dateRecorded_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type TimelineSubscriptionPayload {
  mutation: MutationType!
  node: Timeline
  updatedFields: [String!]
  previousValues: TimelinePreviousValues
}

input TimelineSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimelineSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimelineSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimelineSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimelineWhereInput
}

input TimelineUpdateInput {
  confirmed: Int
  recoveries: Int
  deaths: Int
  dateRecorded: DateTime
  state: StateUpdateOneRequiredWithoutTimelineInput
}

input TimelineUpdateManyDataInput {
  confirmed: Int
  recoveries: Int
  deaths: Int
  dateRecorded: DateTime
}

input TimelineUpdateManyMutationInput {
  confirmed: Int
  recoveries: Int
  deaths: Int
  dateRecorded: DateTime
}

input TimelineUpdateManyWithoutStateInput {
  create: [TimelineCreateWithoutStateInput!]
  connect: [TimelineWhereUniqueInput!]
  set: [TimelineWhereUniqueInput!]
  disconnect: [TimelineWhereUniqueInput!]
  delete: [TimelineWhereUniqueInput!]
  update: [TimelineUpdateWithWhereUniqueWithoutStateInput!]
  updateMany: [TimelineUpdateManyWithWhereNestedInput!]
  deleteMany: [TimelineScalarWhereInput!]
  upsert: [TimelineUpsertWithWhereUniqueWithoutStateInput!]
}

input TimelineUpdateManyWithWhereNestedInput {
  where: TimelineScalarWhereInput!
  data: TimelineUpdateManyDataInput!
}

input TimelineUpdateWithoutStateDataInput {
  confirmed: Int
  recoveries: Int
  deaths: Int
  dateRecorded: DateTime
}

input TimelineUpdateWithWhereUniqueWithoutStateInput {
  where: TimelineWhereUniqueInput!
  data: TimelineUpdateWithoutStateDataInput!
}

input TimelineUpsertWithWhereUniqueWithoutStateInput {
  where: TimelineWhereUniqueInput!
  update: TimelineUpdateWithoutStateDataInput!
  create: TimelineCreateWithoutStateInput!
}

input TimelineWhereInput {
  """Logical AND on all given filters."""
  AND: [TimelineWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimelineWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimelineWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  confirmed: Int

  """All values that are not equal to given value."""
  confirmed_not: Int

  """All values that are contained in given list."""
  confirmed_in: [Int!]

  """All values that are not contained in given list."""
  confirmed_not_in: [Int!]

  """All values less than the given value."""
  confirmed_lt: Int

  """All values less than or equal the given value."""
  confirmed_lte: Int

  """All values greater than the given value."""
  confirmed_gt: Int

  """All values greater than or equal the given value."""
  confirmed_gte: Int
  recoveries: Int

  """All values that are not equal to given value."""
  recoveries_not: Int

  """All values that are contained in given list."""
  recoveries_in: [Int!]

  """All values that are not contained in given list."""
  recoveries_not_in: [Int!]

  """All values less than the given value."""
  recoveries_lt: Int

  """All values less than or equal the given value."""
  recoveries_lte: Int

  """All values greater than the given value."""
  recoveries_gt: Int

  """All values greater than or equal the given value."""
  recoveries_gte: Int
  deaths: Int

  """All values that are not equal to given value."""
  deaths_not: Int

  """All values that are contained in given list."""
  deaths_in: [Int!]

  """All values that are not contained in given list."""
  deaths_not_in: [Int!]

  """All values less than the given value."""
  deaths_lt: Int

  """All values less than or equal the given value."""
  deaths_lte: Int

  """All values greater than the given value."""
  deaths_gt: Int

  """All values greater than or equal the given value."""
  deaths_gte: Int
  dateRecorded: DateTime

  """All values that are not equal to given value."""
  dateRecorded_not: DateTime

  """All values that are contained in given list."""
  dateRecorded_in: [DateTime!]

  """All values that are not contained in given list."""
  dateRecorded_not_in: [DateTime!]

  """All values less than the given value."""
  dateRecorded_lt: DateTime

  """All values less than or equal the given value."""
  dateRecorded_lte: DateTime

  """All values greater than the given value."""
  dateRecorded_gt: DateTime

  """All values greater than or equal the given value."""
  dateRecorded_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  state: StateWhereInput
}

input TimelineWhereUniqueInput {
  id: ID
}
